<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/components/Navigation.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/Navigation.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { Nav } from &quot;react-bootstrap&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;&#10;export default function Navigation() {&#10;  const pathname = usePathname();&#10;  return (&#10;    &lt;div id='navBar' className={&quot;bg-body-tertiary&quot;}&gt;&#10;      &lt;div className='brand'&gt;&#10;        &lt;h1&gt;&#10;          &lt;Link href='/'&gt;Task Manager&lt;/Link&gt;&#10;        &lt;/h1&gt;&#10;      &lt;/div&gt;&#10;      &lt;Nav className='flex'&gt;&#10;        &lt;Nav.Item&gt;&#10;          &lt;Nav.Link as={Link} className={`py-3${pathname === '/dashboard' ? ' on' : ''}`} href='/dashboard'&gt;&#10;            Dash Board&#10;          &lt;/Nav.Link&gt;&#10;        &lt;/Nav.Item&gt;&#10;        &lt;Nav.Item&gt;&#10;          &lt;Nav.Link as={Link} className={`py-3${pathname === '/calendar' ? ' on' : ''}`} href='/calendar'&gt;&#10;            Calendar&#10;          &lt;/Nav.Link&gt;&#10;        &lt;/Nav.Item&gt;&#10;        &lt;Nav.Item&gt;&#10;          &lt;Nav.Link as={Link} className={`py-3${pathname === '/main' ? ' on' : ''}`} href='/main'&gt;&#10;            Main&#10;          &lt;/Nav.Link&gt;&#10;        &lt;/Nav.Item&gt;&#10;      &lt;/Nav&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { Nav } from &quot;react-bootstrap&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;&#10;export default function Navigation() {&#10;  const pathname = usePathname();&#10;  return (&#10;    &lt;div id='navBar' className={&quot;bg-body-tertiary&quot;}&gt;&#10;      &lt;div className='brand'&gt;&#10;        &lt;h1&gt;&#10;          &lt;Link href='/'&gt;Task Manager&lt;/Link&gt;&#10;        &lt;/h1&gt;&#10;      &lt;/div&gt;&#10;      &lt;Nav className='flex'&gt;&#10;        &lt;Nav.Item className={pathname === '/dashboard' ? 'on' : ''}&gt;&#10;          &lt;Nav.Link as={Link} className='py-3' href='/dashboard'&gt;&#10;            Dash Board&#10;          &lt;/Nav.Link&gt;&#10;        &lt;/Nav.Item&gt;&#10;        &lt;Nav.Item className={pathname === '/calendar' ? 'on' : ''}&gt;&#10;          &lt;Nav.Link as={Link} className='py-3' href='/calendar'&gt;&#10;            Calendar&#10;          &lt;/Nav.Link&gt;&#10;        &lt;/Nav.Item&gt;&#10;        &lt;Nav.Item className={pathname === '/main' ? 'on' : ''}&gt;&#10;          &lt;Nav.Link as={Link} className='py-3' href='/main'&gt;&#10;            Main&#10;          &lt;/Nav.Link&gt;&#10;        &lt;/Nav.Item&gt;&#10;      &lt;/Nav&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/dashboard/components/TodoItem.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/dashboard/components/TodoItem.tsx" />
              <option name="originalContent" value="import { TodoItemType } from &quot;../../hooks/useCtrlItems&quot;;&#10;import { BsExclamationCircle } from &quot;react-icons/bs&quot;;&#10;import { useRef } from &quot;react&quot;;&#10;&#10;function getDateOnly(dateStr: string) {&#10;  return dateStr.split(&quot;T&quot;)[0];&#10;}&#10;interface TodoItemProps extends TodoItemType {&#10;  onDoubleClick: () =&gt; void;&#10;  draggable?: boolean;&#10;  onDragStart?: (e: React.DragEvent) =&gt; void;&#10;}&#10;export default function TodoItem({&#10;  title,&#10;  onDoubleClick,&#10;  draggable,&#10;  onDragStart,&#10;  end_date,&#10;}: TodoItemProps) {&#10;  const itemRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const todayStr = new Date().toISOString().split(&quot;T&quot;)[0];&#10;  const isOverdue =&#10;    end_date &amp;&amp; getDateOnly(end_date) &lt; todayStr &amp;&amp; status !== &quot;done&quot;;&#10;  return (&#10;    &lt;div&#10;      ref={itemRef}&#10;      className='todo-item'&#10;      onDoubleClick={onDoubleClick}&#10;      draggable={draggable}&#10;      onDragStart={onDragStart}&#10;    &gt;&#10;      {isOverdue &amp;&amp; (&#10;        &lt;BsExclamationCircle color='red' style={{ marginRight: 6 }} /&gt;&#10;      )}&#10;      {title}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { TodoItemType } from &quot;../../hooks/useCtrlItems&quot;;&#10;import { BsExclamationCircle } from &quot;react-icons/bs&quot;;&#10;import { useRef } from &quot;react&quot;;&#10;&#10;function getDateOnly(dateStr: string) {&#10;  return dateStr.split(&quot;T&quot;)[0];&#10;}&#10;interface TodoItemProps extends TodoItemType {&#10;  onDoubleClick: () =&gt; void;&#10;  draggable?: boolean;&#10;  onDragStart?: (e: React.DragEvent) =&gt; void;&#10;}&#10;export default function TodoItem({&#10;  title,&#10;  onDoubleClick,&#10;  draggable,&#10;  onDragStart,&#10;  start_date,&#10;  end_date,&#10;}: TodoItemProps) {&#10;  const itemRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const todayStr = new Date().toISOString().split(&quot;T&quot;)[0];&#10;  const isOverdue =&#10;    end_date &amp;&amp; getDateOnly(end_date) &lt; todayStr &amp;&amp; status !== &quot;done&quot;;&#10;  return (&#10;    &lt;div&#10;      ref={itemRef}&#10;      className='todo-item'&#10;      onDoubleClick={onDoubleClick}&#10;      draggable={draggable}&#10;      onDragStart={onDragStart}&#10;    &gt;&#10;      {isOverdue &amp;&amp; (&#10;        &lt;BsExclamationCircle color='red' style={{ marginRight: 6 }} /&gt;&#10;      )}&#10;      &lt;div className=&quot;todo-title&quot;&gt;{title}&lt;/div&gt;&#10;      &lt;div className=&quot;todo-dates&quot; style={{ fontSize: '0.9em', color: '#888' }}&gt;&#10;        {start_date &amp;&amp; (&#10;          &lt;span&gt;시작: {getDateOnly(start_date)}&lt;/span&gt;&#10;        )}&#10;        {start_date &amp;&amp; end_date &amp;&amp; &lt;span&gt; | &lt;/span&gt;}&#10;        {end_date &amp;&amp; (&#10;          &lt;span&gt;마감: {getDateOnly(end_date)}&lt;/span&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>